/*
 * This file was generated by Guardrail (https://github.com/twilio/guardrail).
 * Modifications will be overwritten; instead edit the OpenAPI/Swagger spec file.
*/
package com.example.guardrailspringdemo.definitions;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Optional;
import static java.util.Objects.requireNonNull;

@JsonIgnoreProperties(ignoreUnknown = true)
public class Pet {

    @JsonProperty("name")
    private final String name;

    @JsonProperty("id")
    private final Optional<Long> id;

    @JsonProperty("category")
    private final Optional<Category> category;

    @JsonProperty("photoUrls")
    private final java.util.List<String> photoUrls;

    @JsonProperty("tags")
    private final Optional<java.util.List<Tag>> tags;

    @JsonProperty("status")
    private final Optional<String> status;

    @JsonCreator
    protected Pet(@JsonProperty("name") final String name, @JsonProperty("id") final Optional<Long> id,
            @JsonProperty("category") final Optional<Category> category,
            @JsonProperty("photoUrls") final java.util.List<String> photoUrls,
            @JsonProperty("tags") final Optional<java.util.List<Tag>> tags,
            @JsonProperty("status") final Optional<String> status) {
        super();
        this.name = requireNonNull(name, "name is required");
        this.id = id == null ? Optional.empty() : id;
        this.category = category == null ? Optional.empty() : category;
        this.photoUrls = requireNonNull(photoUrls, "photoUrls is required");
        this.tags = tags == null ? Optional.empty() : tags;
        this.status = status == null ? Optional.empty() : status;
    }

    public String getName() {
        return this.name;
    }

    public Optional<Long> getId() {
        return this.id;
    }

    public Optional<Category> getCategory() {
        return this.category;
    }

    public java.util.List<String> getPhotoUrls() {
        return this.photoUrls;
    }

    public Optional<java.util.List<Tag>> getTags() {
        return this.tags;
    }

    public Optional<String> getStatus() {
        return this.status;
    }

    @Override
    public String toString() {
        return "Pet{" + "name=" + getName() + ", id=" + getId() + ", category=" + getCategory() + ", photoUrls="
                + getPhotoUrls() + ", tags=" + getTags() + ", status=" + getStatus() + "}";
    }

    @Override
    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        final Pet other = (Pet) o;
        return getName().equals(other.getName()) && getId().equals(other.getId())
                && getCategory().equals(other.getCategory()) && getPhotoUrls().equals(other.getPhotoUrls())
                && getTags().equals(other.getTags()) && getStatus().equals(other.getStatus());
    }

    @Override
    public int hashCode() {
        return java.util.Objects.hash(getName(), getId(), getCategory(), getPhotoUrls(), getTags(), getStatus());
    }

    public static class Builder {

        private String name;

        private Optional<Long> id = Optional.empty();

        private Optional<Category> category = Optional.empty();

        private java.util.List<String> photoUrls = new java.util.ArrayList<>();

        private Optional<java.util.List<Tag>> tags = Optional.empty();

        private Optional<String> status = Optional.empty();

        public Builder(final String name) {
            this.name = requireNonNull(name, "name is required");
        }

        public Builder(final Pet template) {
            this.name = template.getName();
            this.id = template.getId();
            this.category = template.getCategory();
            this.photoUrls = template.getPhotoUrls();
            this.tags = template.getTags();
            this.status = template.getStatus();
        }

        public Builder withName(final String name) {
            this.name = requireNonNull(name, "name is required");
            return this;
        }

        public Builder withName(final Optional<String> optionalName) {
            requireNonNull(optionalName, "optionalName is required").ifPresent(name -> this.name = name);
            return this;
        }

        public Builder withId(final long id) {
            this.id = Optional.of(id);
            return this;
        }

        public Builder withId(final Optional<Long> optionalId) {
            this.id = requireNonNull(optionalId, "optionalId is required");
            return this;
        }

        public Builder withCategory(final Category category) {
            this.category = Optional.ofNullable(category);
            return this;
        }

        public Builder withCategory(final Optional<Category> optionalCategory) {
            this.category = requireNonNull(optionalCategory, "optionalCategory is required");
            return this;
        }

        public Builder withPhotoUrls(final java.util.List<String> photoUrls) {
            this.photoUrls = requireNonNull(photoUrls, "photoUrls is required");
            return this;
        }

        public Builder withPhotoUrls(final Optional<java.util.List<String>> optionalPhotoUrls) {
            requireNonNull(optionalPhotoUrls, "optionalPhotoUrls is required")
                    .ifPresent(photoUrls -> this.photoUrls = photoUrls);
            return this;
        }

        public Builder withTags(final java.util.List<Tag> tags) {
            this.tags = Optional.ofNullable(tags);
            return this;
        }

        public Builder withTags(final Optional<java.util.List<Tag>> optionalTags) {
            this.tags = requireNonNull(optionalTags, "optionalTags is required");
            return this;
        }

        public Builder withStatus(final String status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        public Builder withStatus(final Optional<String> optionalStatus) {
            this.status = requireNonNull(optionalStatus, "optionalStatus is required");
            return this;
        }

        public Pet build() {
            requireNonNull(this.name, "this.name is required");
            requireNonNull(this.id, "this.id is required");
            requireNonNull(this.category, "this.category is required");
            requireNonNull(this.photoUrls, "this.photoUrls is required");
            requireNonNull(this.tags, "this.tags is required");
            requireNonNull(this.status, "this.status is required");
            return new Pet(this.name, this.id, this.category, this.photoUrls, this.tags, this.status);
        }
    }
}
