/*
 * This file was generated by Guardrail (https://github.com/twilio/guardrail).
 * Modifications will be overwritten; instead edit the OpenAPI/Swagger spec file.
*/
package com.example.guardrailspringdemo.definitions;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Optional;
import static java.util.Objects.requireNonNull;

@JsonIgnoreProperties(ignoreUnknown = true)
public class User {

    @JsonProperty("id")
    private final Optional<Long> id;

    @JsonProperty("username")
    private final Optional<String> username;

    @JsonProperty("firstName")
    private final Optional<String> firstName;

    @JsonProperty("lastName")
    private final Optional<String> lastName;

    @JsonProperty("email")
    private final Optional<String> email;

    @JsonProperty("password")
    private final Optional<String> password;

    @JsonProperty("phone")
    private final Optional<String> phone;

    @JsonProperty("userStatus")
    private final Optional<Integer> userStatus;

    @JsonCreator
    protected User(@JsonProperty("id") final Optional<Long> id,
            @JsonProperty("username") final Optional<String> username,
            @JsonProperty("firstName") final Optional<String> firstName,
            @JsonProperty("lastName") final Optional<String> lastName,
            @JsonProperty("email") final Optional<String> email,
            @JsonProperty("password") final Optional<String> password,
            @JsonProperty("phone") final Optional<String> phone,
            @JsonProperty("userStatus") final Optional<Integer> userStatus) {
        super();
        this.id = id == null ? Optional.empty() : id;
        this.username = username == null ? Optional.empty() : username;
        this.firstName = firstName == null ? Optional.empty() : firstName;
        this.lastName = lastName == null ? Optional.empty() : lastName;
        this.email = email == null ? Optional.empty() : email;
        this.password = password == null ? Optional.empty() : password;
        this.phone = phone == null ? Optional.empty() : phone;
        this.userStatus = userStatus == null ? Optional.empty() : userStatus;
    }

    public Optional<Long> getId() {
        return this.id;
    }

    public Optional<String> getUsername() {
        return this.username;
    }

    public Optional<String> getFirstName() {
        return this.firstName;
    }

    public Optional<String> getLastName() {
        return this.lastName;
    }

    public Optional<String> getEmail() {
        return this.email;
    }

    public Optional<String> getPassword() {
        return this.password;
    }

    public Optional<String> getPhone() {
        return this.phone;
    }

    public Optional<Integer> getUserStatus() {
        return this.userStatus;
    }

    @Override
    public String toString() {
        return "User{" + "id=" + getId() + ", username=" + getUsername() + ", firstName=" + getFirstName()
                + ", lastName=" + getLastName() + ", email=" + getEmail() + ", password=" + getPassword() + ", phone="
                + getPhone() + ", userStatus=" + getUserStatus() + "}";
    }

    @Override
    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        final User other = (User) o;
        return getId().equals(other.getId()) && getUsername().equals(other.getUsername())
                && getFirstName().equals(other.getFirstName()) && getLastName().equals(other.getLastName())
                && getEmail().equals(other.getEmail()) && getPassword().equals(other.getPassword())
                && getPhone().equals(other.getPhone()) && getUserStatus().equals(other.getUserStatus());
    }

    @Override
    public int hashCode() {
        return java.util.Objects.hash(getId(), getUsername(), getFirstName(), getLastName(), getEmail(), getPassword(),
                getPhone(), getUserStatus());
    }

    public static class Builder {

        private Optional<Long> id = Optional.empty();

        private Optional<String> username = Optional.empty();

        private Optional<String> firstName = Optional.empty();

        private Optional<String> lastName = Optional.empty();

        private Optional<String> email = Optional.empty();

        private Optional<String> password = Optional.empty();

        private Optional<String> phone = Optional.empty();

        private Optional<Integer> userStatus = Optional.empty();

        public Builder() {
        }

        public Builder(final User template) {
            this.id = template.getId();
            this.username = template.getUsername();
            this.firstName = template.getFirstName();
            this.lastName = template.getLastName();
            this.email = template.getEmail();
            this.password = template.getPassword();
            this.phone = template.getPhone();
            this.userStatus = template.getUserStatus();
        }

        public Builder withId(final long id) {
            this.id = Optional.of(id);
            return this;
        }

        public Builder withId(final Optional<Long> optionalId) {
            this.id = requireNonNull(optionalId, "optionalId is required");
            return this;
        }

        public Builder withUsername(final String username) {
            this.username = Optional.ofNullable(username);
            return this;
        }

        public Builder withUsername(final Optional<String> optionalUsername) {
            this.username = requireNonNull(optionalUsername, "optionalUsername is required");
            return this;
        }

        public Builder withFirstName(final String firstName) {
            this.firstName = Optional.ofNullable(firstName);
            return this;
        }

        public Builder withFirstName(final Optional<String> optionalFirstName) {
            this.firstName = requireNonNull(optionalFirstName, "optionalFirstName is required");
            return this;
        }

        public Builder withLastName(final String lastName) {
            this.lastName = Optional.ofNullable(lastName);
            return this;
        }

        public Builder withLastName(final Optional<String> optionalLastName) {
            this.lastName = requireNonNull(optionalLastName, "optionalLastName is required");
            return this;
        }

        public Builder withEmail(final String email) {
            this.email = Optional.ofNullable(email);
            return this;
        }

        public Builder withEmail(final Optional<String> optionalEmail) {
            this.email = requireNonNull(optionalEmail, "optionalEmail is required");
            return this;
        }

        public Builder withPassword(final String password) {
            this.password = Optional.ofNullable(password);
            return this;
        }

        public Builder withPassword(final Optional<String> optionalPassword) {
            this.password = requireNonNull(optionalPassword, "optionalPassword is required");
            return this;
        }

        public Builder withPhone(final String phone) {
            this.phone = Optional.ofNullable(phone);
            return this;
        }

        public Builder withPhone(final Optional<String> optionalPhone) {
            this.phone = requireNonNull(optionalPhone, "optionalPhone is required");
            return this;
        }

        public Builder withUserStatus(final int userStatus) {
            this.userStatus = Optional.of(userStatus);
            return this;
        }

        public Builder withUserStatus(final Optional<Integer> optionalUserStatus) {
            this.userStatus = requireNonNull(optionalUserStatus, "optionalUserStatus is required");
            return this;
        }

        public User build() {
            requireNonNull(this.id, "this.id is required");
            requireNonNull(this.username, "this.username is required");
            requireNonNull(this.firstName, "this.firstName is required");
            requireNonNull(this.lastName, "this.lastName is required");
            requireNonNull(this.email, "this.email is required");
            requireNonNull(this.password, "this.password is required");
            requireNonNull(this.phone, "this.phone is required");
            requireNonNull(this.userStatus, "this.userStatus is required");
            return new User(this.id, this.username, this.firstName, this.lastName, this.email, this.password,
                    this.phone, this.userStatus);
        }
    }
}
