/*
 * This file was generated by Guardrail (https://github.com/twilio/guardrail).
 * Modifications will be overwritten; instead edit the OpenAPI/Swagger spec file.
*/
package com.example.guardrailspringdemo.store;

import java.util.Optional;
import java.util.concurrent.CompletionStage;
import javax.validation.constraints.NotNull;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.async.DeferredResult;
import org.springframework.web.multipart.MultipartFile;
import com.example.guardrailspringdemo.*;
import com.example.guardrailspringdemo.definitions.*;

@RestController
@RequestMapping("/v2/store")
public class StoreResource {

    private static final Logger logger = LoggerFactory.getLogger(StoreResource.class);

    private final StoreHandler handler;

    @Autowired
    public StoreResource(final StoreHandler handler) {
        this.handler = handler;
    }

    @GetMapping(path = "/inventory", produces = MediaType.APPLICATION_JSON_VALUE)
    public DeferredResult<ResponseEntity<?>> getInventory() {
        DeferredResult<ResponseEntity<?>> response = new DeferredResult<>();
        this.handler.getInventory()
                .whenComplete((final StoreHandler.GetInventoryResponse result, final Throwable err) -> {
                    if (err != null) {
                        logger.error("StoreHandler.getInventory threw an exception ({}): {}", err.getClass().getName(),
                                err.getMessage(), err);
                        response.setErrorResult(ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build());
                    } else {
                        final ResponseEntity.BodyBuilder builder = ResponseEntity.status(result.getStatusCode());
                        if (result instanceof StoreHandler.GetInventoryResponse.Ok) {
                            response.setResult(
                                    builder.body(((StoreHandler.GetInventoryResponse.Ok) result).getEntityBody()));
                        } else {
                            response.setResult(builder.build());
                        }
                    }
                });
        return response;
    }

    @PostMapping(path = "/order", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    public DeferredResult<ResponseEntity<?>> placeOrder(
            @NotNull @RequestBody final com.example.guardrailspringdemo.definitions.Order body) {
        DeferredResult<ResponseEntity<?>> response = new DeferredResult<>();
        this.handler.placeOrder(body)
                .whenComplete((final StoreHandler.PlaceOrderResponse result, final Throwable err) -> {
                    if (err != null) {
                        logger.error("StoreHandler.placeOrder threw an exception ({}): {}", err.getClass().getName(),
                                err.getMessage(), err);
                        response.setErrorResult(ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build());
                    } else {
                        final ResponseEntity.BodyBuilder builder = ResponseEntity.status(result.getStatusCode());
                        if (result instanceof StoreHandler.PlaceOrderResponse.Ok) {
                            response.setResult(
                                    builder.body(((StoreHandler.PlaceOrderResponse.Ok) result).getEntityBody()));
                        } else {
                            response.setResult(builder.build());
                        }
                    }
                });
        return response;
    }

    @GetMapping(path = "/order/{orderId}", produces = MediaType.APPLICATION_JSON_VALUE)
    public DeferredResult<ResponseEntity<?>> getOrderById(@NotNull @PathVariable("orderId") final Long orderId) {
        DeferredResult<ResponseEntity<?>> response = new DeferredResult<>();
        this.handler.getOrderById(orderId)
                .whenComplete((final StoreHandler.GetOrderByIdResponse result, final Throwable err) -> {
                    if (err != null) {
                        logger.error("StoreHandler.getOrderById threw an exception ({}): {}", err.getClass().getName(),
                                err.getMessage(), err);
                        response.setErrorResult(ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build());
                    } else {
                        final ResponseEntity.BodyBuilder builder = ResponseEntity.status(result.getStatusCode());
                        if (result instanceof StoreHandler.GetOrderByIdResponse.Ok) {
                            response.setResult(
                                    builder.body(((StoreHandler.GetOrderByIdResponse.Ok) result).getEntityBody()));
                        } else {
                            response.setResult(builder.build());
                        }
                    }
                });
        return response;
    }

    @DeleteMapping(path = "/order/{orderId}")
    public DeferredResult<ResponseEntity<?>> deleteOrder(@NotNull @PathVariable("orderId") final Long orderId) {
        DeferredResult<ResponseEntity<?>> response = new DeferredResult<>();
        this.handler.deleteOrder(orderId)
                .whenComplete((final StoreHandler.DeleteOrderResponse result, final Throwable err) -> {
                    if (err != null) {
                        logger.error("StoreHandler.deleteOrder threw an exception ({}): {}", err.getClass().getName(),
                                err.getMessage(), err);
                        response.setErrorResult(ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build());
                    } else {
                        final ResponseEntity.BodyBuilder builder = ResponseEntity.status(result.getStatusCode());
                        response.setResult(builder.build());
                    }
                });
        return response;
    }
}
