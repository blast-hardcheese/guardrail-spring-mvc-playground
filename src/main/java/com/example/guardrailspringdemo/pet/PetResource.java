/*
 * This file was generated by Guardrail (https://github.com/twilio/guardrail).
 * Modifications will be overwritten; instead edit the OpenAPI/Swagger spec file.
*/
package com.example.guardrailspringdemo.pet;

import java.util.Optional;
import java.util.concurrent.CompletionStage;
import javax.validation.constraints.NotNull;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.async.DeferredResult;
import org.springframework.web.multipart.MultipartFile;
import com.example.guardrailspringdemo.*;
import com.example.guardrailspringdemo.definitions.*;

@RestController
@RequestMapping("/v2/pet")
public class PetResource {

    private static final Logger logger = LoggerFactory.getLogger(PetResource.class);

    private final PetHandler handler;

    @Autowired
    public PetResource(final PetHandler handler) {
        this.handler = handler;
    }

    @PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE)
    public DeferredResult<ResponseEntity<?>> addPet(
            @NotNull @RequestBody final com.example.guardrailspringdemo.definitions.Pet body) {
        DeferredResult<ResponseEntity<?>> response = new DeferredResult<>();
        this.handler.addPet(body).whenComplete((final PetHandler.AddPetResponse result, final Throwable err) -> {
            if (err != null) {
                logger.error("PetHandler.addPet threw an exception ({}): {}", err.getClass().getName(),
                        err.getMessage(), err);
                response.setErrorResult(ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build());
            } else {
                final ResponseEntity.BodyBuilder builder = ResponseEntity.status(result.getStatusCode());
                response.setResult(builder.build());
            }
        });
        return response;
    }

    @PutMapping(consumes = MediaType.APPLICATION_JSON_VALUE)
    public DeferredResult<ResponseEntity<?>> updatePet(
            @NotNull @RequestBody final com.example.guardrailspringdemo.definitions.Pet body) {
        DeferredResult<ResponseEntity<?>> response = new DeferredResult<>();
        this.handler.updatePet(body).whenComplete((final PetHandler.UpdatePetResponse result, final Throwable err) -> {
            if (err != null) {
                logger.error("PetHandler.updatePet threw an exception ({}): {}", err.getClass().getName(),
                        err.getMessage(), err);
                response.setErrorResult(ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build());
            } else {
                final ResponseEntity.BodyBuilder builder = ResponseEntity.status(result.getStatusCode());
                response.setResult(builder.build());
            }
        });
        return response;
    }

    @GetMapping(path = "/findByStatus", produces = MediaType.APPLICATION_JSON_VALUE)
    public DeferredResult<ResponseEntity<?>> findPetsByStatus(
            @NotNull @RequestParam("status") final java.util.List<String> status) {
        DeferredResult<ResponseEntity<?>> response = new DeferredResult<>();
        this.handler.findPetsByStatus(status)
                .whenComplete((final PetHandler.FindPetsByStatusResponse result, final Throwable err) -> {
                    if (err != null) {
                        logger.error("PetHandler.findPetsByStatus threw an exception ({}): {}",
                                err.getClass().getName(), err.getMessage(), err);
                        response.setErrorResult(ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build());
                    } else {
                        final ResponseEntity.BodyBuilder builder = ResponseEntity.status(result.getStatusCode());
                        if (result instanceof PetHandler.FindPetsByStatusResponse.Ok) {
                            response.setResult(
                                    builder.body(((PetHandler.FindPetsByStatusResponse.Ok) result).getEntityBody()));
                        } else {
                            response.setResult(builder.build());
                        }
                    }
                });
        return response;
    }

    @GetMapping(path = "/findByStatus/{status}", produces = MediaType.APPLICATION_JSON_VALUE)
    public DeferredResult<ResponseEntity<?>> findPetsByStatusEnum(
            @NotNull @PathVariable("status") final String status) {
        DeferredResult<ResponseEntity<?>> response = new DeferredResult<>();
        this.handler.findPetsByStatusEnum(status)
                .whenComplete((final PetHandler.FindPetsByStatusEnumResponse result, final Throwable err) -> {
                    if (err != null) {
                        logger.error("PetHandler.findPetsByStatusEnum threw an exception ({}): {}",
                                err.getClass().getName(), err.getMessage(), err);
                        response.setErrorResult(ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build());
                    } else {
                        final ResponseEntity.BodyBuilder builder = ResponseEntity.status(result.getStatusCode());
                        if (result instanceof PetHandler.FindPetsByStatusEnumResponse.Ok) {
                            response.setResult(builder
                                    .body(((PetHandler.FindPetsByStatusEnumResponse.Ok) result).getEntityBody()));
                        } else {
                            response.setResult(builder.build());
                        }
                    }
                });
        return response;
    }

    @GetMapping(path = "/findByTags", produces = MediaType.APPLICATION_JSON_VALUE)
    public DeferredResult<ResponseEntity<?>> findPetsByTags(
            @NotNull @RequestParam("tags") final java.util.List<String> tags) {
        DeferredResult<ResponseEntity<?>> response = new DeferredResult<>();
        this.handler.findPetsByTags(tags)
                .whenComplete((final PetHandler.FindPetsByTagsResponse result, final Throwable err) -> {
                    if (err != null) {
                        logger.error("PetHandler.findPetsByTags threw an exception ({}): {}", err.getClass().getName(),
                                err.getMessage(), err);
                        response.setErrorResult(ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build());
                    } else {
                        final ResponseEntity.BodyBuilder builder = ResponseEntity.status(result.getStatusCode());
                        if (result instanceof PetHandler.FindPetsByTagsResponse.Ok) {
                            response.setResult(
                                    builder.body(((PetHandler.FindPetsByTagsResponse.Ok) result).getEntityBody()));
                        } else {
                            response.setResult(builder.build());
                        }
                    }
                });
        return response;
    }

    @PostMapping(path = "/{petId}", consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE)
    public DeferredResult<ResponseEntity<?>> updatePetWithForm(@NotNull @PathVariable("petId") final Long petId,
            @ModelAttribute("name") final java.util.Optional<String> name,
            @ModelAttribute("status") final java.util.Optional<String> status) {
        DeferredResult<ResponseEntity<?>> response = new DeferredResult<>();
        this.handler.updatePetWithForm(petId, name, status)
                .whenComplete((final PetHandler.UpdatePetWithFormResponse result, final Throwable err) -> {
                    if (err != null) {
                        logger.error("PetHandler.updatePetWithForm threw an exception ({}): {}",
                                err.getClass().getName(), err.getMessage(), err);
                        response.setErrorResult(ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build());
                    } else {
                        final ResponseEntity.BodyBuilder builder = ResponseEntity.status(result.getStatusCode());
                        response.setResult(builder.build());
                    }
                });
        return response;
    }

    @GetMapping(path = "/{petId}", produces = MediaType.APPLICATION_JSON_VALUE)
    public DeferredResult<ResponseEntity<?>> getPetById(@NotNull @PathVariable("petId") final Long petId) {
        DeferredResult<ResponseEntity<?>> response = new DeferredResult<>();
        this.handler.getPetById(petId)
                .whenComplete((final PetHandler.GetPetByIdResponse result, final Throwable err) -> {
                    if (err != null) {
                        logger.error("PetHandler.getPetById threw an exception ({}): {}", err.getClass().getName(),
                                err.getMessage(), err);
                        response.setErrorResult(ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build());
                    } else {
                        final ResponseEntity.BodyBuilder builder = ResponseEntity.status(result.getStatusCode());
                        if (result instanceof PetHandler.GetPetByIdResponse.Ok) {
                            response.setResult(
                                    builder.body(((PetHandler.GetPetByIdResponse.Ok) result).getEntityBody()));
                        } else {
                            response.setResult(builder.build());
                        }
                    }
                });
        return response;
    }

    @DeleteMapping(path = "/{petId}")
    public DeferredResult<ResponseEntity<?>> deletePet(@NotNull @PathVariable("petId") final Long petId,
            @RequestHeader("api_key") final java.util.Optional<String> apiKey,
            @RequestParam("includeChildren") final java.util.Optional<Boolean> includeChildren,
            @RequestParam("status") final java.util.Optional<String> status) {
        DeferredResult<ResponseEntity<?>> response = new DeferredResult<>();
        this.handler.deletePet(petId, apiKey, includeChildren, status)
                .whenComplete((final PetHandler.DeletePetResponse result, final Throwable err) -> {
                    if (err != null) {
                        logger.error("PetHandler.deletePet threw an exception ({}): {}", err.getClass().getName(),
                                err.getMessage(), err);
                        response.setErrorResult(ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build());
                    } else {
                        final ResponseEntity.BodyBuilder builder = ResponseEntity.status(result.getStatusCode());
                        response.setResult(builder.build());
                    }
                });
        return response;
    }

    @PostMapping(path = "/{petId}/uploadImage", consumes = MediaType.MULTIPART_FORM_DATA_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    public DeferredResult<ResponseEntity<?>> uploadFile(@NotNull @PathVariable("petId") final Long petId,
            @RequestParam("additionalMetadata") final java.util.Optional<String> additionalMetadata,
            @RequestParam("file") final java.util.Optional<MultipartFile> file,
            @NotNull @RequestParam("file2") final MultipartFile file2,
            @NotNull @RequestParam("file3") final MultipartFile file3,
            @NotNull @RequestParam("long-value") final Long longValue,
            @NotNull @RequestParam("custom-value") final Long customValue,
            @RequestParam("custom-optional-value") final java.util.Optional<Long> customOptionalValue) {
        DeferredResult<ResponseEntity<?>> response = new DeferredResult<>();
        this.handler
                .uploadFile(petId, additionalMetadata, file, file2, file3, longValue, customValue, customOptionalValue)
                .whenComplete((final PetHandler.UploadFileResponse result, final Throwable err) -> {
                    if (err != null) {
                        logger.error("PetHandler.uploadFile threw an exception ({}): {}", err.getClass().getName(),
                                err.getMessage(), err);
                        response.setErrorResult(ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build());
                    } else {
                        final ResponseEntity.BodyBuilder builder = ResponseEntity.status(result.getStatusCode());
                        if (result instanceof PetHandler.UploadFileResponse.Ok) {
                            response.setResult(
                                    builder.body(((PetHandler.UploadFileResponse.Ok) result).getEntityBody()));
                        } else {
                            response.setResult(builder.build());
                        }
                    }
                });
        return response;
    }
}
