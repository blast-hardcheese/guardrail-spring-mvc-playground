/*
 * This file was generated by Guardrail (https://github.com/twilio/guardrail).
 * Modifications will be overwritten; instead edit the OpenAPI/Swagger spec file.
*/
package com.example.guardrailspringdemo.user;

import java.util.Optional;
import java.util.concurrent.CompletionStage;
import javax.validation.constraints.NotNull;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.async.DeferredResult;
import org.springframework.web.multipart.MultipartFile;
import com.example.guardrailspringdemo.*;
import com.example.guardrailspringdemo.definitions.*;

@RestController
@RequestMapping("/v2/user")
public class UserResource {

    private static final Logger logger = LoggerFactory.getLogger(UserResource.class);

    private final UserHandler handler;

    @Autowired
    public UserResource(final UserHandler handler) {
        this.handler = handler;
    }

    @PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE)
    public DeferredResult<ResponseEntity<?>> createUser(
            @NotNull @RequestBody final com.example.guardrailspringdemo.definitions.User body) {
        DeferredResult<ResponseEntity<?>> response = new DeferredResult<>();
        this.handler.createUser(body)
                .whenComplete((final UserHandler.CreateUserResponse result, final Throwable err) -> {
                    if (err != null) {
                        logger.error("UserHandler.createUser threw an exception ({}): {}", err.getClass().getName(),
                                err.getMessage(), err);
                        response.setErrorResult(ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build());
                    } else {
                        final ResponseEntity.BodyBuilder builder = ResponseEntity.status(result.getStatusCode());
                        response.setResult(builder.build());
                    }
                });
        return response;
    }

    @PostMapping(path = "/createWithArray", consumes = MediaType.APPLICATION_JSON_VALUE)
    public DeferredResult<ResponseEntity<?>> createUsersWithArrayInput(
            @NotNull @RequestBody final java.util.List<com.example.guardrailspringdemo.definitions.User> body) {
        DeferredResult<ResponseEntity<?>> response = new DeferredResult<>();
        this.handler.createUsersWithArrayInput(body)
                .whenComplete((final UserHandler.CreateUsersWithArrayInputResponse result, final Throwable err) -> {
                    if (err != null) {
                        logger.error("UserHandler.createUsersWithArrayInput threw an exception ({}): {}",
                                err.getClass().getName(), err.getMessage(), err);
                        response.setErrorResult(ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build());
                    } else {
                        final ResponseEntity.BodyBuilder builder = ResponseEntity.status(result.getStatusCode());
                        response.setResult(builder.build());
                    }
                });
        return response;
    }

    @PostMapping(path = "/createWithList", consumes = MediaType.APPLICATION_JSON_VALUE)
    public DeferredResult<ResponseEntity<?>> createUsersWithListInput(
            @NotNull @RequestBody final java.util.List<com.example.guardrailspringdemo.definitions.User> body) {
        DeferredResult<ResponseEntity<?>> response = new DeferredResult<>();
        this.handler.createUsersWithListInput(body)
                .whenComplete((final UserHandler.CreateUsersWithListInputResponse result, final Throwable err) -> {
                    if (err != null) {
                        logger.error("UserHandler.createUsersWithListInput threw an exception ({}): {}",
                                err.getClass().getName(), err.getMessage(), err);
                        response.setErrorResult(ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build());
                    } else {
                        final ResponseEntity.BodyBuilder builder = ResponseEntity.status(result.getStatusCode());
                        response.setResult(builder.build());
                    }
                });
        return response;
    }

    @GetMapping(path = "/login", produces = MediaType.APPLICATION_JSON_VALUE)
    public DeferredResult<ResponseEntity<?>> loginUser(@NotNull @RequestParam("username") final String username,
            @NotNull @RequestParam("password") final String password) {
        DeferredResult<ResponseEntity<?>> response = new DeferredResult<>();
        this.handler.loginUser(username, password)
                .whenComplete((final UserHandler.LoginUserResponse result, final Throwable err) -> {
                    if (err != null) {
                        logger.error("UserHandler.loginUser threw an exception ({}): {}", err.getClass().getName(),
                                err.getMessage(), err);
                        response.setErrorResult(ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build());
                    } else {
                        final ResponseEntity.BodyBuilder builder = ResponseEntity.status(result.getStatusCode());
                        if (result instanceof UserHandler.LoginUserResponse.Ok) {
                            response.setResult(
                                    builder.body(((UserHandler.LoginUserResponse.Ok) result).getEntityBody()));
                        } else {
                            response.setResult(builder.build());
                        }
                    }
                });
        return response;
    }

    @GetMapping(path = "/logout")
    public DeferredResult<ResponseEntity<?>> logoutUser() {
        DeferredResult<ResponseEntity<?>> response = new DeferredResult<>();
        this.handler.logoutUser().whenComplete((final UserHandler.LogoutUserResponse result, final Throwable err) -> {
            if (err != null) {
                logger.error("UserHandler.logoutUser threw an exception ({}): {}", err.getClass().getName(),
                        err.getMessage(), err);
                response.setErrorResult(ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build());
            } else {
                final ResponseEntity.BodyBuilder builder = ResponseEntity.status(result.getStatusCode());
                response.setResult(builder.build());
            }
        });
        return response;
    }

    @GetMapping(path = "/{username}", produces = MediaType.APPLICATION_JSON_VALUE)
    public DeferredResult<ResponseEntity<?>> getUserByName(@NotNull @PathVariable("username") final String username) {
        DeferredResult<ResponseEntity<?>> response = new DeferredResult<>();
        this.handler.getUserByName(username)
                .whenComplete((final UserHandler.GetUserByNameResponse result, final Throwable err) -> {
                    if (err != null) {
                        logger.error("UserHandler.getUserByName threw an exception ({}): {}", err.getClass().getName(),
                                err.getMessage(), err);
                        response.setErrorResult(ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build());
                    } else {
                        final ResponseEntity.BodyBuilder builder = ResponseEntity.status(result.getStatusCode());
                        if (result instanceof UserHandler.GetUserByNameResponse.Ok) {
                            response.setResult(
                                    builder.body(((UserHandler.GetUserByNameResponse.Ok) result).getEntityBody()));
                        } else {
                            response.setResult(builder.build());
                        }
                    }
                });
        return response;
    }

    @PutMapping(path = "/{username}", consumes = MediaType.APPLICATION_JSON_VALUE)
    public DeferredResult<ResponseEntity<?>> updateUser(@NotNull @PathVariable("username") final String username,
            @NotNull @RequestBody final com.example.guardrailspringdemo.definitions.User body) {
        DeferredResult<ResponseEntity<?>> response = new DeferredResult<>();
        this.handler.updateUser(username, body)
                .whenComplete((final UserHandler.UpdateUserResponse result, final Throwable err) -> {
                    if (err != null) {
                        logger.error("UserHandler.updateUser threw an exception ({}): {}", err.getClass().getName(),
                                err.getMessage(), err);
                        response.setErrorResult(ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build());
                    } else {
                        final ResponseEntity.BodyBuilder builder = ResponseEntity.status(result.getStatusCode());
                        response.setResult(builder.build());
                    }
                });
        return response;
    }

    @DeleteMapping(path = "/{username}")
    public DeferredResult<ResponseEntity<?>> deleteUser(@NotNull @PathVariable("username") final String username) {
        DeferredResult<ResponseEntity<?>> response = new DeferredResult<>();
        this.handler.deleteUser(username)
                .whenComplete((final UserHandler.DeleteUserResponse result, final Throwable err) -> {
                    if (err != null) {
                        logger.error("UserHandler.deleteUser threw an exception ({}): {}", err.getClass().getName(),
                                err.getMessage(), err);
                        response.setErrorResult(ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build());
                    } else {
                        final ResponseEntity.BodyBuilder builder = ResponseEntity.status(result.getStatusCode());
                        response.setResult(builder.build());
                    }
                });
        return response;
    }
}
